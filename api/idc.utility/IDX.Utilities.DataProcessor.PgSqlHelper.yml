### YamlMime:ManagedReference
items:
- uid: IDX.Utilities.DataProcessor.PgSqlHelper
  commentId: T:IDX.Utilities.DataProcessor.PgSqlHelper
  id: PgSqlHelper
  parent: IDX.Utilities.DataProcessor
  children:
  - IDX.Utilities.DataProcessor.PgSqlHelper.#ctor
  - IDX.Utilities.DataProcessor.PgSqlHelper.#ctor(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson)
  - IDX.Utilities.DataProcessor.PgSqlHelper.#ctor(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[])
  - IDX.Utilities.DataProcessor.PgSqlHelper.#ctor(System.String)
  - IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest,IDX.Utilities.Models.BootstrapTable.BTResponse{System.Collections.Generic.List{System.Object}}@)
  - IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest,IDX.Utilities.Delegator.CallbackBTData,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB(System.String,System.Boolean)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.Action,System.String,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.Threading.Tasks.Task,System.String,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.Commit(System.Boolean)
  - IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync(System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.Connect(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson,System.Boolean,System.Boolean)
  - IDX.Utilities.DataProcessor.PgSqlHelper.Connect(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[],System.Boolean,System.Boolean)
  - IDX.Utilities.DataProcessor.PgSqlHelper.Connect(System.Boolean,System.Boolean)
  - IDX.Utilities.DataProcessor.PgSqlHelper.Connect(System.String,System.Boolean,System.Boolean)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson,System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[],System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(System.String,System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect(System.Boolean)
  - IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync(System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.Dispose
  - IDX.Utilities.DataProcessor.PgSqlHelper.Dispose(System.Boolean)
  - IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync
  - IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore
  - IDX.Utilities.DataProcessor.PgSqlHelper.Done(System.Boolean)
  - IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,System.Int32@)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery(System.String,System.Int32@)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteNonQuery,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync(System.String,IDX.Utilities.Delegator.CallbackExecuteNonQuery,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,System.Collections.Generic.List{System.Object}@)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery(System.String,System.Collections.Generic.List{System.Object}@)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteQuery,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync(System.String,IDX.Utilities.Delegator.CallbackExecuteQuery,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync``1(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteScalar{``0},System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync``1(System.String,IDX.Utilities.Delegator.CallbackExecuteScalar{``0},System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar``1(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,``0@)
  - IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar``1(System.String,``0@)
  - IDX.Utilities.DataProcessor.PgSqlHelper.Rollback(System.Boolean)
  - IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  - IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync(System.Boolean,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: PgSqlHelper
  nameWithType: PgSqlHelper
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper
  type: Class
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: PgSqlHelper
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 35
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Provides a helper class for interacting with a PostgreSQL database.
  example:
  - >-
    <pre><code class="lang-csharp">using var pgh = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await pgh.ConnectAsync(() =&gt; { });

    var result = await pgh.ExecuteQuery("select * from mytable limit 10", rows =&gt;

    {
        foreach (var row in rows)
        {
            Console.WriteLine(row);
        }
    });

    await pgh.DisposeAsync();</code></pre>
  syntax:
    content: 'public class PgSqlHelper : IDisposable, IAsyncDisposable'
    content.vb: Public Class PgSqlHelper Implements IDisposable, IAsyncDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.IAsyncDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(System.Boolean)
  - System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(System.DateTime)
  - System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(System.Decimal)
  - System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(System.Double)
  - System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(System.Int32)
  - System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToString(System.String)
  - System.Object.IDX.Utilities.Validations.Common.EnsureNotNull(System.String,System.String)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Dispose
  id: Dispose
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: PgSqlHelper.Dispose()
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose()
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: Dispose
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 105
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: >-
    Performs the necessary cleanup operations.

    <example>
             <pre><code class="lang-csharp">using (var db = new PgSqlHelper())
             {
                 db.Dispose();
             }</code></pre></example>
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose(System.Boolean)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: Dispose(bool)
  nameWithType: PgSqlHelper.Dispose(bool)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose(bool)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: Dispose
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 123
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Disposes of the resources used by the object.
  example:
  - >-
    <pre><code class="lang-csharp">using (var db = new PgSqlHelper())

    {
        db.Dispose(disposing: true);
    }</code></pre>
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: True if called from <xref href="IDX.Utilities.DataProcessor.PgSqlHelper.Dispose" data-throw-if-not-resolved="false"></xref>, false if called from the finalizer.
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose*
  nameWithType.vb: PgSqlHelper.Dispose(Boolean)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose(Boolean)
  name.vb: Dispose(Boolean)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync
  id: DisposeAsync
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: DisposeAsync()
  nameWithType: PgSqlHelper.DisposeAsync()
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync()
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: DisposeAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 151
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Asynchronously performs the necessary cleanup operations.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper();

    await db.DisposeAsync();</code></pre>
  syntax:
    content: public ValueTask DisposeAsync()
    return:
      type: System.Threading.Tasks.ValueTask
    content.vb: Public Function DisposeAsync() As ValueTask
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync*
  implements:
  - System.IAsyncDisposable.DisposeAsync
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore
  id: DisposeAsyncCore
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: DisposeAsyncCore()
  nameWithType: PgSqlHelper.DisposeAsyncCore()
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore()
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: DisposeAsyncCore
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 169
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Disposes of the resources used by the object asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper();

    await db.DisposeAsyncCore();</code></pre>
  syntax:
    content: protected virtual ValueTask DisposeAsyncCore()
    return:
      type: System.Threading.Tasks.ValueTask
      description: A task that represents the asynchronous dispose operation.
    content.vb: Protected Overridable Function DisposeAsyncCore() As ValueTask
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore*
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.#ctor
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.#ctor
  id: '#ctor'
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: PgSqlHelper()
  nameWithType: PgSqlHelper.PgSqlHelper()
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.PgSqlHelper()
  type: Constructor
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: .ctor
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 213
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  syntax:
    content: public PgSqlHelper()
    content.vb: Public Sub New()
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.#ctor*
  nameWithType.vb: PgSqlHelper.New()
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.New()
  name.vb: New()
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.#ctor(System.String)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: PgSqlHelper(string)
  nameWithType: PgSqlHelper.PgSqlHelper(string)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.PgSqlHelper(string)
  type: Constructor
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: .ctor
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 225
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Initializes a new instance of the PgSqlDataProcessor class.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    var result = await helper.ExecuteQuery("SELECT * FROM mytable");</code></pre>
  syntax:
    content: public PgSqlHelper(string connectionString)
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string for the PostgreSQL database.
    content.vb: Public Sub New(connectionString As String)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.#ctor*
  nameWithType.vb: PgSqlHelper.New(String)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.New(String)
  name.vb: New(String)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.#ctor(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.#ctor(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson)
  id: '#ctor(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson)'
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: PgSqlHelper(ConStringFromJson)
  nameWithType: PgSqlHelper.PgSqlHelper(PgSqlHelper.ConStringFromJson)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.PgSqlHelper(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson)
  type: Constructor
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: .ctor
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 254
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Initializes a new instance of the PgSqlDataProcessor class.
  example:
  - >-
    <pre><code class="lang-csharp">var options = new ConStringFromJson

    {
        JsonFilePath = "path/to/config.json",
        ConfigName = "pgconn",
        PassName = "password",
        EncryptionKey = "my secret key",
        EncryptionSalts = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 }
    };

    using var helper = new PgSqlHelper(options);

    var result = await helper.ExecuteQuery("SELECT * FROM mytable");</code></pre>
  syntax:
    content: public PgSqlHelper(PgSqlHelper.ConStringFromJson options)
    parameters:
    - id: options
      type: IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson
    content.vb: Public Sub New(options As PgSqlHelper.ConStringFromJson)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.#ctor*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: Thrown when the jsonFilePath, configName, or passName is null or whitespace.
  nameWithType.vb: PgSqlHelper.New(PgSqlHelper.ConStringFromJson)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.New(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson)
  name.vb: New(ConStringFromJson)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.#ctor(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[])
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.#ctor(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[])
  id: '#ctor(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[])'
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: PgSqlHelper(CommonConnectionString, string?, byte[]?)
  nameWithType: PgSqlHelper.PgSqlHelper(CommonConnectionString, string?, byte[]?)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.PgSqlHelper(IDX.Utilities.Models.CommonConnectionString, string?, byte[]?)
  type: Constructor
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: .ctor
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 287
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Initializes a new instance of the <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> class with the specified connection string, encryption key, and encryption salts.
  example:
  - >-
    <pre><code class="lang-csharp">var constring = new CommonConnectionString

    {
        Username = "myuser",
        Password = "enc:mysecretkey:mysecretkey:MzIxMTg5NDU3ODEzMjM1NzY1ODU=",
        Host = "localhost",
        Port = 5432,
        Database = "mydb",
        IntegratedSecurity = false,
        Pooling = true,
        MinPoolSize = 1,
        MaxPoolSize = 10
    };

    using var helper = new PgSqlHelper(
        connectionString: constring,
        encryptionKey: "mysecretkey",
        encryptionSalts: new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 }
    );

    var result = await helper.ExecuteQuery("SELECT * FROM mytable");</code></pre>
  syntax:
    content: public PgSqlHelper(CommonConnectionString connectionString, string? encryptionKey, byte[]? encryptionSalts)
    parameters:
    - id: connectionString
      type: IDX.Utilities.Models.CommonConnectionString
      description: The connection string to the PostgreSQL database.
    - id: encryptionKey
      type: System.String
      description: The encryption key used to decrypt the password in the connection string.
    - id: encryptionSalts
      type: System.Byte[]
      description: The encryption salts used in the encryption process.
    content.vb: Public Sub New(connectionString As CommonConnectionString, encryptionKey As String, encryptionSalts As Byte())
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.#ctor*
  nameWithType.vb: PgSqlHelper.New(CommonConnectionString, String, Byte())
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.New(IDX.Utilities.Models.CommonConnectionString, String, Byte())
  name.vb: New(CommonConnectionString, String, Byte())
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect(System.Boolean)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect(System.Boolean)
  id: Disconnect(System.Boolean)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: Disconnect(bool)
  nameWithType: PgSqlHelper.Disconnect(bool)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect(bool)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: Disconnect
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 316
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Disconnects from the PostgreSQL database.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await helper.ConnectAsync();

    var result = await helper.ExecuteQuery("SELECT * FROM mytable");

    helper.Disconnect();</code></pre>
  syntax:
    content: public virtual PgSqlHelper Disconnect(bool commitTrans = false)
    parameters:
    - id: commitTrans
      type: System.Boolean
      description: Optional. Specifies whether to commit the current transaction before disconnecting. Defaults to false.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The current instance of the PgSqlHelper class.
    content.vb: Public Overridable Function Disconnect(commitTrans As Boolean = False) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect*
  nameWithType.vb: PgSqlHelper.Disconnect(Boolean)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect(Boolean)
  name.vb: Disconnect(Boolean)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync(System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync(System.Boolean,System.Threading.CancellationToken)
  id: DisconnectAsync(System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: DisconnectAsync(bool, CancellationToken)
  nameWithType: PgSqlHelper.DisconnectAsync(bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync(bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: DisconnectAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 348
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Disconnects from the PostgreSQL database.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await helper.ConnectAsync();

    var result = await helper.ExecuteQuery("SELECT * FROM mytable");

    await helper.DisconnectAsync();</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> DisconnectAsync(bool commitTrans = false, CancellationToken cancellationToken = default)
    parameters:
    - id: commitTrans
      type: System.Boolean
      description: Specifies whether to commit the current transaction before disconnecting.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: A Task representing the asynchronous operation.
    content.vb: Public Overridable Function DisconnectAsync(commitTrans As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync*
  exceptions:
  - type: Npgsql.NpgsqlException
    commentId: T:Npgsql.NpgsqlException
    description: Thrown if an error occurs while committing or rolling back the transaction.
  nameWithType.vb: PgSqlHelper.DisconnectAsync(Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync(Boolean, System.Threading.CancellationToken)
  name.vb: DisconnectAsync(Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  id: DisconnectAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: DisconnectAsync(Action, bool, CancellationToken)
  nameWithType: PgSqlHelper.DisconnectAsync(Action, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync(System.Action, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: DisconnectAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 385
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Disconnects from the PostgreSQL server and executes the specified callback asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await helper.ConnectAsync();

    await helper.DisconnectAsync(
        () =&gt;
        {
            Console.WriteLine("Disconnected from PostgreSQL.");
        },
        false
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> DisconnectAsync(Action callback, bool commitTrans = false, CancellationToken cancellationToken = default)
    parameters:
    - id: callback
      type: System.Action
      description: The callback action to be executed after disconnecting.
    - id: commitTrans
      type: System.Boolean
      description: Specifies whether to commit the current transaction before disconnecting.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The current instance of PgSqlHelper.
    content.vb: Public Overridable Function DisconnectAsync(callback As Action, commitTrans As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync*
  nameWithType.vb: PgSqlHelper.DisconnectAsync(Action, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync(System.Action, Boolean, System.Threading.CancellationToken)
  name.vb: DisconnectAsync(Action, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(System.Boolean,System.Boolean)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Connect(System.Boolean,System.Boolean)
  id: Connect(System.Boolean,System.Boolean)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: Connect(bool, bool)
  nameWithType: PgSqlHelper.Connect(bool, bool)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(bool, bool)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: Connect
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 405
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Connects to the PostgreSQL database.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    helper.Connect();</code></pre>
  syntax:
    content: public virtual PgSqlHelper Connect(bool useTransaction = false, bool disconnectFirst = false)
    parameters:
    - id: useTransaction
      type: System.Boolean
      description: Specifies whether to use a transaction.
    - id: disconnectFirst
      type: System.Boolean
      description: Specifies whether to disconnect first before connecting.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: A PgSqlHelper instance representing the connection.
    content.vb: Public Overridable Function Connect(useTransaction As Boolean = False, disconnectFirst As Boolean = False) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.Connect*
  nameWithType.vb: PgSqlHelper.Connect(Boolean, Boolean)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(Boolean, Boolean)
  name.vb: Connect(Boolean, Boolean)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(System.String,System.Boolean,System.Boolean)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Connect(System.String,System.Boolean,System.Boolean)
  id: Connect(System.String,System.Boolean,System.Boolean)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: Connect(string, bool, bool)
  nameWithType: PgSqlHelper.Connect(string, bool, bool)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(string, bool, bool)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: Connect
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 423
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Connects to a PostgreSQL database using the provided connection string.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper();

    helper.Connect("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");</code></pre>
  syntax:
    content: public virtual PgSqlHelper Connect(string connectionString, bool useTransaction = false, bool disconnectFirst = false)
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string to use for the database connection.
    - id: useTransaction
      type: System.Boolean
      description: 'Flag indicating whether to use a transaction for the connection (default: false).'
    - id: disconnectFirst
      type: System.Boolean
      description: 'Flag indicating whether to disconnect from any existing connection before connecting (default: false).'
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: A <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance representing the connected database.
    content.vb: Public Overridable Function Connect(connectionString As String, useTransaction As Boolean = False, disconnectFirst As Boolean = False) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.Connect*
  nameWithType.vb: PgSqlHelper.Connect(String, Boolean, Boolean)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(String, Boolean, Boolean)
  name.vb: Connect(String, Boolean, Boolean)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[],System.Boolean,System.Boolean)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Connect(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[],System.Boolean,System.Boolean)
  id: Connect(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[],System.Boolean,System.Boolean)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: Connect(CommonConnectionString, string?, byte[]?, bool, bool)
  nameWithType: PgSqlHelper.Connect(CommonConnectionString, string?, byte[]?, bool, bool)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(IDX.Utilities.Models.CommonConnectionString, string?, byte[]?, bool, bool)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: Connect
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 466
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Connects to the Postgres database using the provided connection string, encryption key, and salts.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper();

    var constring = new CommonConnectionString

    {
        Username = "myuser",
        Password = "enc:mysecretkey:mysecretkey:MzIxMTg5NDU3ODEzMjM1NzY1ODU=",
        Host = "localhost",
        Port = 5432,
        Database = "mydb",
        IntegratedSecurity = false,
        Pooling = true,
        MinPoolSize = 1,
        MaxPoolSize = 10
    };

    helper.Connect(
        connectionString: constring,
        encryptionKey: "mysecretkey",
        encryptionSalts: new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 },
        useTransaction: true,
        disconnectFirst: true
    );</code></pre>
  syntax:
    content: public virtual PgSqlHelper Connect(CommonConnectionString connectionString, string? encryptionKey, byte[]? encryptionSalts, bool useTransaction = false, bool disconnectFirst = false)
    parameters:
    - id: connectionString
      type: IDX.Utilities.Models.CommonConnectionString
      description: The common connection string.
    - id: encryptionKey
      type: System.String
      description: The encryption key.
    - id: encryptionSalts
      type: System.Byte[]
      description: The encryption salts.
    - id: useTransaction
      type: System.Boolean
      description: Optional. Indicates whether to use a transaction. Default is false.
    - id: disconnectFirst
      type: System.Boolean
      description: Optional. Indicates whether to disconnect first before connecting. Default is false.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The PgSqlHelper instance representing the connection to the database.
    content.vb: Public Overridable Function Connect(connectionString As CommonConnectionString, encryptionKey As String, encryptionSalts As Byte(), useTransaction As Boolean = False, disconnectFirst As Boolean = False) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.Connect*
  nameWithType.vb: PgSqlHelper.Connect(CommonConnectionString, String, Byte(), Boolean, Boolean)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(IDX.Utilities.Models.CommonConnectionString, String, Byte(), Boolean, Boolean)
  name.vb: Connect(CommonConnectionString, String, Byte(), Boolean, Boolean)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson,System.Boolean,System.Boolean)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Connect(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson,System.Boolean,System.Boolean)
  id: Connect(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson,System.Boolean,System.Boolean)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: Connect(ConStringFromJson, bool, bool)
  nameWithType: PgSqlHelper.Connect(PgSqlHelper.ConStringFromJson, bool, bool)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson, bool, bool)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: Connect
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 506
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Connects to the PgSql database.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper();

    var options = new ConStringFromJson

    {
        Host = "localhost",
        Username = "myuser",
        Password = "enc:mysecretkey:mysecretkey:MzIxMTg5NDU3ODEzMjM1NzY1ODU=",
        Database = "mydb",
        IntegratedSecurity = false,
        Pooling = true,
        MinPoolSize = 1,
        MaxPoolSize = 10
    };

    helper.Connect(options: options, useTransaction: true, disconnectFirst: true);</code></pre>
  syntax:
    content: public virtual PgSqlHelper Connect(PgSqlHelper.ConStringFromJson options, bool useTransaction = false, bool disconnectFirst = false)
    parameters:
    - id: options
      type: IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson
      description: The connection string options.
    - id: useTransaction
      type: System.Boolean
      description: Optional. Specifies whether to use a transaction.
    - id: disconnectFirst
      type: System.Boolean
      description: Optional. Specifies whether to disconnect from the database before connecting.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The PgSqlHelper instance.
    content.vb: Public Overridable Function Connect(options As PgSqlHelper.ConStringFromJson, useTransaction As Boolean = False, disconnectFirst As Boolean = False) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.Connect*
  nameWithType.vb: PgSqlHelper.Connect(PgSqlHelper.ConStringFromJson, Boolean, Boolean)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.Connect(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson, Boolean, Boolean)
  name.vb: Connect(ConStringFromJson, Boolean, Boolean)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  id: ConnectAsync(System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ConnectAsync(Action?, bool, bool, CancellationToken)
  nameWithType: PgSqlHelper.ConnectAsync(Action?, bool, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(System.Action?, bool, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ConnectAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 531
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Connects to the PostgreSQL database asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper();

    await helper.ConnectAsync(
        () =&gt;
        {
            Console.WriteLine("Connected to the database.");
        },
        useTransaction: true
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ConnectAsync(Action? callback = null, bool useTransaction = false, bool disconnectFirst = false, CancellationToken cancellationToken = default)
    parameters:
    - id: callback
      type: System.Action
      description: The callback action to be executed after connecting.
    - id: useTransaction
      type: System.Boolean
      description: Indicates whether to use a transaction during the connection.
    - id: disconnectFirst
      type: System.Boolean
      description: Indicates whether to disconnect the current connection before connecting.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The PgSqlHelper instance.
    content.vb: Public Overridable Function ConnectAsync(callback As Action = Nothing, useTransaction As Boolean = False, disconnectFirst As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync*
  nameWithType.vb: PgSqlHelper.ConnectAsync(Action, Boolean, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(System.Action, Boolean, Boolean, System.Threading.CancellationToken)
  name.vb: ConnectAsync(Action, Boolean, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(System.String,System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(System.String,System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  id: ConnectAsync(System.String,System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ConnectAsync(string, Action?, bool, bool, CancellationToken)
  nameWithType: PgSqlHelper.ConnectAsync(string, Action?, bool, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(string, System.Action?, bool, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ConnectAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 571
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Connects to the PostgreSQL database asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper();

    await helper.ConnectAsync(
        "Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;",
        () =&gt;
        {
            Console.WriteLine("Connected to the database.");
        },
        useTransaction: true
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ConnectAsync(string connectionString, Action? callback = null, bool useTransaction = false, bool disconnectFirst = false, CancellationToken cancellationToken = default)
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string for the database.
    - id: callback
      type: System.Action
      description: An optional callback to run after connecting to the database.
    - id: useTransaction
      type: System.Boolean
      description: Specifies whether to use a transaction during the connection.
    - id: disconnectFirst
      type: System.Boolean
      description: Specifies whether to disconnect from the database before connecting.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: A task representing the asynchronous operation.
    content.vb: Public Overridable Function ConnectAsync(connectionString As String, callback As Action = Nothing, useTransaction As Boolean = False, disconnectFirst As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync*
  nameWithType.vb: PgSqlHelper.ConnectAsync(String, Action, Boolean, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(String, System.Action, Boolean, Boolean, System.Threading.CancellationToken)
  name.vb: ConnectAsync(String, Action, Boolean, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[],System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[],System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  id: ConnectAsync(IDX.Utilities.Models.CommonConnectionString,System.String,System.Byte[],System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ConnectAsync(CommonConnectionString, string?, byte[]?, Action?, bool, bool, CancellationToken)
  nameWithType: PgSqlHelper.ConnectAsync(CommonConnectionString, string?, byte[]?, Action?, bool, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(IDX.Utilities.Models.CommonConnectionString, string?, byte[]?, System.Action?, bool, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ConnectAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 623
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Connects to the PostgreSQL database asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper();

    await helper.ConnectAsync(
        new CommonConnectionString
        {
            Server = "localhost",
            Database = "mydatabase",
            Username = "myuser",
            Password = "mypass"
        },
        "my secret key",
        new byte[] { 0x01, 0x02, 0x03, 0x04 },
        () =&gt;
        {
            Console.WriteLine("Connected to the database.");
        },
        useTransaction: true
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ConnectAsync(CommonConnectionString connectionString, string? encryptionKey, byte[]? encryptionSalts, Action? callback = null, bool useTransaction = false, bool disconnectFirst = false, CancellationToken cancellationToken = default)
    parameters:
    - id: connectionString
      type: IDX.Utilities.Models.CommonConnectionString
      description: The connection string.
    - id: encryptionKey
      type: System.String
      description: The encryption key.
    - id: encryptionSalts
      type: System.Byte[]
      description: The encryption salts.
    - id: callback
      type: System.Action
      description: The callback to execute after connecting.
    - id: useTransaction
      type: System.Boolean
      description: Whether to use a transaction.
    - id: disconnectFirst
      type: System.Boolean
      description: Whether to disconnect first before connecting.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Overridable Function ConnectAsync(connectionString As CommonConnectionString, encryptionKey As String, encryptionSalts As Byte(), callback As Action = Nothing, useTransaction As Boolean = False, disconnectFirst As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync*
  nameWithType.vb: PgSqlHelper.ConnectAsync(CommonConnectionString, String, Byte(), Action, Boolean, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(IDX.Utilities.Models.CommonConnectionString, String, Byte(), System.Action, Boolean, Boolean, System.Threading.CancellationToken)
  name.vb: ConnectAsync(CommonConnectionString, String, Byte(), Action, Boolean, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson,System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson,System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  id: ConnectAsync(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson,System.Action,System.Boolean,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ConnectAsync(ConStringFromJson, Action?, bool, bool, CancellationToken)
  nameWithType: PgSqlHelper.ConnectAsync(PgSqlHelper.ConStringFromJson, Action?, bool, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson, System.Action?, bool, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ConnectAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 686
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Connects to the PostgreSQL database asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper();

    var options = new ConStringFromJson

    {
        Host = "localhost",
        Port = 5432,
        Username = "myuser",
        Password = "mypass",
        Database = "mydb",
        IntegratedSecurity = false,
        Pooling = true,
        MinPoolSize = 1,
        MaxPoolSize = 10
    };

    await db.ConnectAsync(
        options,
        () =&gt;
        {
            Console.WriteLine("Connected to the database.");
        },
        useTransaction: true,
        disconnectFirst: true
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ConnectAsync(PgSqlHelper.ConStringFromJson options, Action? callback = null, bool useTransaction = false, bool disconnectFirst = false, CancellationToken cancellationToken = default)
    parameters:
    - id: options
      type: IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson
      description: The connection string options.
    - id: callback
      type: System.Action
      description: An optional callback to be executed after the connection is established.
    - id: useTransaction
      type: System.Boolean
      description: A flag indicating whether to use a transaction.
    - id: disconnectFirst
      type: System.Boolean
      description: A flag indicating whether to disconnect from the database first before connecting.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Overridable Function ConnectAsync(options As PgSqlHelper.ConStringFromJson, callback As Action = Nothing, useTransaction As Boolean = False, disconnectFirst As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when <code class="paramref">options</code> is null or empty.
  nameWithType.vb: PgSqlHelper.ConnectAsync(PgSqlHelper.ConStringFromJson, Action, Boolean, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync(IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson, System.Action, Boolean, Boolean, System.Threading.CancellationToken)
  name.vb: ConnectAsync(ConStringFromJson, Action, Boolean, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB(System.String,System.Boolean)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB(System.String,System.Boolean)
  id: ChangeDB(System.String,System.Boolean)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ChangeDB(string?, bool)
  nameWithType: PgSqlHelper.ChangeDB(string?, bool)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB(string?, bool)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ChangeDB
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 721
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Changes the database of the PgSqlHelper instance.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    db.ChangeDB("myotherdb", useTransaction: true);</code></pre>
  syntax:
    content: public virtual PgSqlHelper ChangeDB(string? dbName, bool useTransaction = false)
    parameters:
    - id: dbName
      type: System.String
      description: The name of the database to switch to.
    - id: useTransaction
      type: System.Boolean
      description: Optional. Indicates whether to use a transaction after changing the database. Default is false.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The modified PgSqlHelper instance.
    content.vb: Public Overridable Function ChangeDB(dbName As String, useTransaction As Boolean = False) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code class="paramref">dbName</code> is null or whitespace.
  nameWithType.vb: PgSqlHelper.ChangeDB(String, Boolean)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB(String, Boolean)
  name.vb: ChangeDB(String, Boolean)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  id: ChangeDBAsync(System.String,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ChangeDBAsync(string?, bool, CancellationToken)
  nameWithType: PgSqlHelper.ChangeDBAsync(string?, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(string?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ChangeDBAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 747
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Changes the database connection to the specified database.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ChangeDBAsync("myotherdb", useTransaction: true);</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ChangeDBAsync(string? dbName, bool useTransaction = false, CancellationToken cancellationToken = default)
    parameters:
    - id: dbName
      type: System.String
      description: The name of the database to connect to.
    - id: useTransaction
      type: System.Boolean
      description: Whether to use a transaction for the connection.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The updated <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Overridable Function ChangeDBAsync(dbName As String, useTransaction As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">dbName</code> is null or whitespace.
  nameWithType.vb: PgSqlHelper.ChangeDBAsync(String, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(String, Boolean, System.Threading.CancellationToken)
  name.vb: ChangeDBAsync(String, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.Threading.Tasks.Task,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.Threading.Tasks.Task,System.String,System.Boolean,System.Threading.CancellationToken)
  id: ChangeDBAsync(System.Threading.Tasks.Task,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ChangeDBAsync(Task, string?, bool, CancellationToken)
  nameWithType: PgSqlHelper.ChangeDBAsync(Task, string?, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.Threading.Tasks.Task, string?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ChangeDBAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 785
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Changes the database connection asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ChangeDBAsync(
        async () =&gt;
        {
            Console.WriteLine("Connected to the database.");
        },
        "myotherdb",
        useTransaction: true
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ChangeDBAsync(Task callback, string? dbName, bool useTransaction = false, CancellationToken cancellationToken = default)
    parameters:
    - id: callback
      type: System.Threading.Tasks.Task
      description: The action to be executed after the database connection is changed.
    - id: dbName
      type: System.String
      description: The name of the database to be connected to.
    - id: useTransaction
      type: System.Boolean
      description: Indicates whether to use a transaction for the database connection.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Overridable Function ChangeDBAsync(callback As Task, dbName As String, useTransaction As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">callback</code> is null.
  nameWithType.vb: PgSqlHelper.ChangeDBAsync(Task, String, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.Threading.Tasks.Task, String, Boolean, System.Threading.CancellationToken)
  name.vb: ChangeDBAsync(Task, String, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.Action,System.String,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.Action,System.String,System.Boolean,System.Threading.CancellationToken)
  id: ChangeDBAsync(System.Action,System.String,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ChangeDBAsync(Action, string?, bool, CancellationToken)
  nameWithType: PgSqlHelper.ChangeDBAsync(Action, string?, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.Action, string?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ChangeDBAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 825
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Changes the database connection asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ChangeDBAsync(
        () =&gt;
        {
            Console.WriteLine("Connected to the database.");
        },
        "myotherdb",
        useTransaction: true
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ChangeDBAsync(Action callback, string? dbName, bool useTransaction = false, CancellationToken cancellationToken = default)
    parameters:
    - id: callback
      type: System.Action
      description: The action to be executed after the database connection is changed.
    - id: dbName
      type: System.String
      description: The name of the database to be connected to.
    - id: useTransaction
      type: System.Boolean
      description: Indicates whether to use a transaction for the database connection.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Overridable Function ChangeDBAsync(callback As Action, dbName As String, useTransaction As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">callback</code> is null.
  nameWithType.vb: PgSqlHelper.ChangeDBAsync(Action, String, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync(System.Action, String, Boolean, System.Threading.CancellationToken)
  name.vb: ChangeDBAsync(Action, String, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Commit(System.Boolean)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Commit(System.Boolean)
  id: Commit(System.Boolean)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: Commit(bool)
  nameWithType: PgSqlHelper.Commit(bool)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Commit(bool)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: Commit
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 871
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Commits the current transaction and restarts it if specified.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ConnectAsync();

    await db.BeginTransactionAsync();

    try

    {
        await db.ExecuteQuery("insert into mytable (name) values ('John Doe')");
        await db.Commit(restartTransaction: true);
        await db.ExecuteQuery("insert into mytable (name) values ('Jane Doe')");
        await db.Commit();
        await db.RollbackAsync();
    }

    catch (Exception ex)

    {
        await db.RollbackAsync();
        throw;
    }</code></pre>
  syntax:
    content: public virtual PgSqlHelper Commit(bool restartTransaction = false)
    parameters:
    - id: restartTransaction
      type: System.Boolean
      description: Whether to restart the transaction after commit.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The PgSqlHelper instance.
    content.vb: Public Overridable Function Commit(restartTransaction As Boolean = False) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.Commit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the connection is not open.
  nameWithType.vb: PgSqlHelper.Commit(Boolean)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.Commit(Boolean)
  name.vb: Commit(Boolean)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync(System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync(System.Boolean,System.Threading.CancellationToken)
  id: CommitAsync(System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: CommitAsync(bool, CancellationToken)
  nameWithType: PgSqlHelper.CommitAsync(bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync(bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: CommitAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 911
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Commits the current transaction and optionally restarts the transaction.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ConnectAsync();

    await db.BeginTransactionAsync();

    try

    {
        await db.ExecuteQuery("insert into mytable (name) values ('John Doe')");
        await db.CommitAsync(restartTransaction: true);
        await db.ExecuteQuery("insert into mytable (name) values ('Jane Doe')");
        await db.CommitAsync();
        await db.RollbackAsync();
    }

    catch (Exception ex)

    {
        await db.RollbackAsync();
        throw;
    }</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> CommitAsync(bool restartTransaction = false, CancellationToken cancellationToken = default)
    parameters:
    - id: restartTransaction
      type: System.Boolean
      description: Indicates whether to restart the transaction after commit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Overridable Function CommitAsync(restartTransaction As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the connection is not established.
  nameWithType.vb: PgSqlHelper.CommitAsync(Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync(Boolean, System.Threading.CancellationToken)
  name.vb: CommitAsync(Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  id: CommitAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: CommitAsync(Action, bool, CancellationToken)
  nameWithType: PgSqlHelper.CommitAsync(Action, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync(System.Action, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: CommitAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 960
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Commits the current transaction and executes a callback action asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ConnectAsync();

    await db.BeginTransactionAsync();

    try

    {
        await db.ExecuteQuery("insert into mytable (name) values ('John Doe')");
        await db.CommitAsync(
            () =&gt;
            {
                Console.WriteLine("Committed transaction.");
            },
            restartTransaction: true
        );
        await db.ExecuteQuery("insert into mytable (name) values ('Jane Doe')");
        await db.CommitAsync();
        await db.RollbackAsync();
    }

    catch (Exception ex)

    {
        await db.RollbackAsync();
        throw;
    }</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> CommitAsync(Action callback, bool restartTransaction = false, CancellationToken cancellationToken = default)
    parameters:
    - id: callback
      type: System.Action
      description: The callback action to be executed.
    - id: restartTransaction
      type: System.Boolean
      description: Whether to restart the transaction after commit. Default is false.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The updated PgSqlHelper instance.
    content.vb: Public Overridable Function CommitAsync(callback As Action, restartTransaction As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync*
  nameWithType.vb: PgSqlHelper.CommitAsync(Action, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync(System.Action, Boolean, System.Threading.CancellationToken)
  name.vb: CommitAsync(Action, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Rollback(System.Boolean)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Rollback(System.Boolean)
  id: Rollback(System.Boolean)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: Rollback(bool)
  nameWithType: PgSqlHelper.Rollback(bool)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Rollback(bool)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: Rollback
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 998
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Rolls back the current transaction.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ConnectAsync();

    await db.BeginTransactionAsync();

    try

    {
        await db.ExecuteQuery("insert into mytable (name) values ('John Doe')");
        throw new Exception("Exception for test purpose.");
    }

    catch (Exception ex)

    {
        db.Rollback();
        Console.WriteLine("Transaction rolled back.");
        throw;
    }</code></pre>
  syntax:
    content: public virtual PgSqlHelper Rollback(bool restartTransaction = false)
    parameters:
    - id: restartTransaction
      type: System.Boolean
      description: Indicates whether to restart the transaction after rolling back.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: A reference to the current <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Overridable Function Rollback(restartTransaction As Boolean = False) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.Rollback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if there is no active transaction.
  nameWithType.vb: PgSqlHelper.Rollback(Boolean)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.Rollback(Boolean)
  name.vb: Rollback(Boolean)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync(System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync(System.Boolean,System.Threading.CancellationToken)
  id: RollbackAsync(System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: RollbackAsync(bool, CancellationToken)
  nameWithType: PgSqlHelper.RollbackAsync(bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync(bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: RollbackAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1036
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Rollbacks the current transaction asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ConnectAsync();

    await db.BeginTransactionAsync();

    try

    {
        await db.ExecuteQuery("insert into mytable (name) values ('John Doe')");
        throw new Exception("Exception for test purpose.");
    }

    catch (Exception ex)

    {
        await db.RollbackAsync();
        Console.WriteLine("Transaction rolled back.");
        throw;
    }</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> RollbackAsync(bool restartTransaction = false, CancellationToken cancellationToken = default)
    parameters:
    - id: restartTransaction
      type: System.Boolean
      description: Indicates whether to restart the transaction after rollback.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The updated <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Overridable Function RollbackAsync(restartTransaction As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the connection is not established.
  nameWithType.vb: PgSqlHelper.RollbackAsync(Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync(Boolean, System.Threading.CancellationToken)
  name.vb: RollbackAsync(Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  id: RollbackAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: RollbackAsync(Action, bool, CancellationToken)
  nameWithType: PgSqlHelper.RollbackAsync(Action, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync(System.Action, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: RollbackAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1083
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Rollbacks the current transaction asynchronously and executes the specified callback.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ConnectAsync();

    await db.BeginTransactionAsync();

    try

    {
        await db.ExecuteQuery("insert into mytable (name) values ('John Doe')");
        throw new Exception("Exception for test purpose.");
    }

    catch (Exception ex)

    {
        await db.RollbackAsync(
            () =&gt;
            {
                Console.WriteLine("Transaction rolled back.");
            },
            restartTransaction: true
        );
        throw;
    }</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> RollbackAsync(Action callback, bool restartTransaction = false, CancellationToken cancellationToken = default)
    parameters:
    - id: callback
      type: System.Action
      description: The callback to execute after rolling back the transaction.
    - id: restartTransaction
      type: System.Boolean
      description: Whether to restart the transaction after rolling back. Default is false.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: A task representing the asynchronous operation.
    content.vb: Public Overridable Function RollbackAsync(callback As Action, restartTransaction As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the connection is not established.
  nameWithType.vb: PgSqlHelper.RollbackAsync(Action, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync(System.Action, Boolean, System.Threading.CancellationToken)
  name.vb: RollbackAsync(Action, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Done(System.Boolean)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Done(System.Boolean)
  id: Done(System.Boolean)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: Done(bool)
  nameWithType: PgSqlHelper.Done(bool)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Done(bool)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: Done
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1118
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Marks the operation as completed and performs necessary cleanup.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ConnectAsync();

    await db.BeginTransactionAsync();

    try

    {
        await db.ExecuteQuery("insert into mytable (name) values ('John Doe')");
        db.Done();
    }

    catch (Exception ex)

    {
        db.Done(false);
        throw;
    }</code></pre>
  syntax:
    content: public virtual void Done(bool commitTransaction = false)
    parameters:
    - id: commitTransaction
      type: System.Boolean
      description: Indicates whether to commit any pending transaction.
    content.vb: Public Overridable Sub Done(commitTransaction As Boolean = False)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.Done*
  nameWithType.vb: PgSqlHelper.Done(Boolean)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.Done(Boolean)
  name.vb: Done(Boolean)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  id: DoneAsync(System.Action,System.Boolean,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: DoneAsync(Action, bool, CancellationToken)
  nameWithType: PgSqlHelper.DoneAsync(Action, bool, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync(System.Action, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: DoneAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1163
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes the provided callback and optionally commits the transaction.
  example:
  - >-
    <pre><code class="lang-csharp">using var db = new PgSqlHelper("Host=localhost;Username=myuser;Password=mypassword;Database=mydb");

    await db.ConnectAsync();

    await db.BeginTransactionAsync();

    try

    {
        await db.ExecuteQuery("insert into mytable (name) values ('John Doe')");
        await db.DoneAsync(
            () =&gt;
            {
                Console.WriteLine("Committed transaction.");
            },
            commitTransaction: true
        );
    }

    catch (Exception ex)

    {
        await db.DoneAsync(
            () =&gt;
            {
                Console.WriteLine("Transaction rolled back.");
            },
            commitTransaction: false
        );
        throw;
    }</code></pre>
  syntax:
    content: public virtual Task DoneAsync(Action callback, bool commitTransaction = false, CancellationToken cancellationToken = default)
    parameters:
    - id: callback
      type: System.Action
      description: The action to execute.
    - id: commitTransaction
      type: System.Boolean
      description: Indicates whether to commit the transaction.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
    content.vb: Public Overridable Function DoneAsync(callback As Action, commitTransaction As Boolean = False, cancellationToken As CancellationToken = Nothing) As Task
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync*
  nameWithType.vb: PgSqlHelper.DoneAsync(Action, Boolean, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync(System.Action, Boolean, System.Threading.CancellationToken)
  name.vb: DoneAsync(Action, Boolean, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,System.Collections.Generic.List{System.Object}@)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,System.Collections.Generic.List{System.Object}@)
  id: ExecuteQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,System.Collections.Generic.List{System.Object}@)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteQuery(SPCallInfo, out List<dynamic>?)
  nameWithType: PgSqlHelper.ExecuteQuery(SPCallInfo, out List<dynamic>?)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo, out System.Collections.Generic.List<dynamic>?)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteQuery
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1590
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes a stored procedure call and retrieves the result as a list of dynamic objects.
  example:
  - >-
    <pre><code class="lang-csharp">var spCallInfo = new SPCallInfo

    {
        ProcedureName = "GetEmployees",
        Parameters = new List&lt;SPParameter&gt;
        {
            new SPCallInfo.SPCallInfoParameter
            {
                ParameterName = "@departmentId",
                DbType = NpgsqlDbType.Integer,
                Value = 1
            }
        }
    };

    var result = new List&lt;dynamic&gt;();

    await helper.ExecuteQuery(spCallInfo, out result);

    foreach (var row in result)

    {
        Console.WriteLine(row);
    }</code></pre>
  syntax:
    content: public virtual PgSqlHelper ExecuteQuery(SPCallInfo spCallInfo, out List<dynamic>? result)
    parameters:
    - id: spCallInfo
      type: IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo
      description: The stored procedure call information.
    - id: result
      type: System.Collections.Generic.List{System.Object}
      description: The list of dynamic objects returned by the query.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The modified PgSqlHelper instance.
    content.vb: Public Overridable Function ExecuteQuery(spCallInfo As SPCallInfo, result As List(Of Object)) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the stored procedure call information is null.
  nameWithType.vb: PgSqlHelper.ExecuteQuery(SPCallInfo, List(Of Object))
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo, System.Collections.Generic.List(Of Object))
  name.vb: ExecuteQuery(SPCallInfo, List(Of Object))
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery(System.String,System.Collections.Generic.List{System.Object}@)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery(System.String,System.Collections.Generic.List{System.Object}@)
  id: ExecuteQuery(System.String,System.Collections.Generic.List{System.Object}@)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteQuery(string, out List<dynamic>?)
  nameWithType: PgSqlHelper.ExecuteQuery(string, out List<dynamic>?)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery(string, out System.Collections.Generic.List<dynamic>?)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteQuery
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1620
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes a query and retrieves the result as a list of dynamic objects.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await helper.ConnectAsync();

    var result = await helper.ExecuteQuery("SELECT * FROM mytable LIMIT 10");

    foreach (var row in result)

    {
        Console.WriteLine(row);
    }</code></pre>
  syntax:
    content: public virtual PgSqlHelper ExecuteQuery(string query, out List<dynamic>? result)
    parameters:
    - id: query
      type: System.String
      description: The SQL query to execute.
    - id: result
      type: System.Collections.Generic.List{System.Object}
      description: The list of dynamic objects returned by the query.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The modified PgSqlHelper instance.
    content.vb: Public Overridable Function ExecuteQuery(query As String, result As List(Of Object)) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the query is null or empty.
  nameWithType.vb: PgSqlHelper.ExecuteQuery(String, List(Of Object))
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery(String, System.Collections.Generic.List(Of Object))
  name.vb: ExecuteQuery(String, List(Of Object))
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar``1(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,``0@)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar``1(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,``0@)
  id: ExecuteScalar``1(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,``0@)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteScalar<T>(SPCallInfo, out T?)
  nameWithType: PgSqlHelper.ExecuteScalar<T>(SPCallInfo, out T?)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar<T>(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo, out T?)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteScalar
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1656
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes the specified stored procedure call and returns the first column of the first row of the result set as a scalar value.
  example:
  - >-
    <pre><code class="lang-csharp">var spCallInfo = new SPCallInfo("myProcedureName")

    {
        Parameters =
        {
            new SPParameter("myParameterName", 1)
        }
    };

    int? result;

    await helper.ExecuteScalar&lt;int&gt;(spCallInfo, out result);

    Console.WriteLine($"Result: {result?.ToString() ?? "null"}");</code></pre>
  syntax:
    content: public virtual PgSqlHelper ExecuteScalar<T>(SPCallInfo spCallInfo, out T? result)
    parameters:
    - id: spCallInfo
      type: IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo
      description: The stored procedure call information.
    - id: result
      type: '{T}'
      description: When this method returns, contains the value of the first column of the first row of the result set, converted to <code class="typeparamref">T</code>. If the result is null, the value of <code class="paramref">result</code> will also be null.
    typeParameters:
    - id: T
      description: The type of the result value.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Overridable Function ExecuteScalar(Of T)(spCallInfo As SPCallInfo, result As T) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the connection is not open.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">spCallInfo</code> is null.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: Thrown when the result value cannot be converted to <code class="typeparamref">T</code>.
  nameWithType.vb: PgSqlHelper.ExecuteScalar(Of T)(SPCallInfo, T)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar(Of T)(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo, T)
  name.vb: ExecuteScalar(Of T)(SPCallInfo, T)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar``1(System.String,``0@)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar``1(System.String,``0@)
  id: ExecuteScalar``1(System.String,``0@)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteScalar<T>(string, out T?)
  nameWithType: PgSqlHelper.ExecuteScalar<T>(string, out T?)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar<T>(string, out T?)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteScalar
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1684
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes a SQL query and returns the scalar result.
  example:
  - >-
    <pre><code class="lang-csharp">string query = "SELECT COUNT(*) FROM mytable";

    int? result;

    await helper.ExecuteScalar&lt;int&gt;(query, out result);

    Console.WriteLine($"Result: {result?.ToString() ?? "null"}");</code></pre>
  syntax:
    content: public virtual PgSqlHelper ExecuteScalar<T>(string query, out T? result)
    parameters:
    - id: query
      type: System.String
      description: The SQL query to execute.
    - id: result
      type: '{T}'
      description: The scalar result of the query.
    typeParameters:
    - id: T
      description: The type of the result.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The modified PgSqlHelper instance.
    content.vb: Public Overridable Function ExecuteScalar(Of T)(query As String, result As T) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar*
  nameWithType.vb: PgSqlHelper.ExecuteScalar(Of T)(String, T)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar(Of T)(String, T)
  name.vb: ExecuteScalar(Of T)(String, T)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,System.Int32@)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,System.Int32@)
  id: ExecuteNonQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,System.Int32@)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(SPCallInfo, out int)
  nameWithType: PgSqlHelper.ExecuteNonQuery(SPCallInfo, out int)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo, out int)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteNonQuery
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1724
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes a non-query stored procedure call and returns the updated PgSqlHelper instance.
  example:
  - >-
    <pre><code class="lang-csharp">var spCallInfo = new SPCallInfo

    {
        ProcedureName = "InsertEmployee",
        Parameters = new List&lt;SPParameter&gt;
        {
            new SPCallInfo.SPCallInfoParameter
            {
                ParameterName = "@name",
                DbType = NpgsqlDbType.Varchar,
                Value = "John Doe"
            }
        }
    };

    int? result;

    await helper.ExecuteQuery(spCallInfo, out result);

    Console.WriteLine($"Result: {result?.ToString() ?? "null"}");</code></pre>
  syntax:
    content: public virtual PgSqlHelper ExecuteNonQuery(SPCallInfo spCallInfo, out int result)
    parameters:
    - id: spCallInfo
      type: IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo
      description: The stored procedure call information.
    - id: result
      type: System.Int32
      description: The number of rows affected by the query.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The updated PgSqlHelper instance.
    content.vb: Public Overridable Function ExecuteNonQuery(spCallInfo As SPCallInfo, result As Integer) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the connection is not open.
  nameWithType.vb: PgSqlHelper.ExecuteNonQuery(SPCallInfo, Integer)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo, Integer)
  name.vb: ExecuteNonQuery(SPCallInfo, Integer)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery(System.String,System.Int32@)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery(System.String,System.Int32@)
  id: ExecuteNonQuery(System.String,System.Int32@)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(string, out int)
  nameWithType: PgSqlHelper.ExecuteNonQuery(string, out int)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery(string, out int)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteNonQuery
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1750
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes a non-query SQL statement and returns the modified row count.
  example:
  - >-
    <pre><code class="lang-csharp">string query = "DELETE FROM mytable WHERE id = 1";

    int? result;

    await helper.ExecuteQuery(query, out result);

    Console.WriteLine($"Deleted {result?.ToString() ?? "null"} rows.");</code></pre>
  syntax:
    content: public virtual PgSqlHelper ExecuteNonQuery(string query, out int result)
    parameters:
    - id: query
      type: System.String
      description: The SQL statement to execute.
    - id: result
      type: System.Int32
      description: The number of rows affected by the SQL statement.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The current instance of the PgSqlHelper.
    content.vb: Public Overridable Function ExecuteNonQuery(query As String, result As Integer) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the query is null or whitespace.
  nameWithType.vb: PgSqlHelper.ExecuteNonQuery(String, Integer)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery(String, Integer)
  name.vb: ExecuteNonQuery(String, Integer)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteQuery,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteQuery,System.Threading.CancellationToken)
  id: ExecuteQueryAsync(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteQuery,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteQueryAsync(SPCallInfo, CallbackExecuteQuery, CancellationToken)
  nameWithType: PgSqlHelper.ExecuteQueryAsync(SPCallInfo, CallbackExecuteQuery, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo, IDX.Utilities.Delegator.CallbackExecuteQuery, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteQueryAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1798
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes the specified stored procedure call asynchronously and invokes the provided callback with the result.
  example:
  - >-
    <pre><code class="lang-csharp">var spCallInfo = new SPCallInfo

    {
        Schema = "public",
        SPName = "get_data",
        Parameters = new[]
        {
            new SPParameter
            {
                Name = "id",
                Value = 1,
                DataType = NpgsqlDbType.Integer
            }
        }
    };

    await helper.ExecuteQueryAsync(
        spCallInfo,
        (rows) =&gt;
        {
            foreach (var row in rows)
            {
                Console.WriteLine(row);
            }
        }
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ExecuteQueryAsync(SPCallInfo spCallInfo, CallbackExecuteQuery callback, CancellationToken cancellationToken = default)
    parameters:
    - id: spCallInfo
      type: IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo
      description: The stored procedure call information.
    - id: callback
      type: IDX.Utilities.Delegator.CallbackExecuteQuery
      description: The callback function to be invoked with the result.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The updated PgSqlHelper instance.
    content.vb: Public Overridable Function ExecuteQueryAsync(spCallInfo As SPCallInfo, callback As CallbackExecuteQuery, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync*
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync(System.String,IDX.Utilities.Delegator.CallbackExecuteQuery,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync(System.String,IDX.Utilities.Delegator.CallbackExecuteQuery,System.Threading.CancellationToken)
  id: ExecuteQueryAsync(System.String,IDX.Utilities.Delegator.CallbackExecuteQuery,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteQueryAsync(string, CallbackExecuteQuery, CancellationToken)
  nameWithType: PgSqlHelper.ExecuteQueryAsync(string, CallbackExecuteQuery, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync(string, IDX.Utilities.Delegator.CallbackExecuteQuery, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteQueryAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1838
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes a SQL query asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await helper.ConnectAsync();

    await helper.ExecuteQueryAsync(
        "SELECT * FROM mytable",
        (rows) =&gt;
        {
            foreach (var row in rows)
            {
                Console.WriteLine(row);
            }
        }
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ExecuteQueryAsync(string query, CallbackExecuteQuery callback, CancellationToken cancellationToken = default)
    parameters:
    - id: query
      type: System.String
      description: The SQL query to execute.
    - id: callback
      type: IDX.Utilities.Delegator.CallbackExecuteQuery
      description: The callback function to execute with the query result.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The updated instance of the PgSqlHelper class.
    content.vb: Public Overridable Function ExecuteQueryAsync(query As String, callback As CallbackExecuteQuery, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the query string is null or whitespace.
  nameWithType.vb: PgSqlHelper.ExecuteQueryAsync(String, CallbackExecuteQuery, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync(String, IDX.Utilities.Delegator.CallbackExecuteQuery, System.Threading.CancellationToken)
  name.vb: ExecuteQueryAsync(String, CallbackExecuteQuery, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync``1(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteScalar{``0},System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync``1(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteScalar{``0},System.Threading.CancellationToken)
  id: ExecuteScalarAsync``1(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteScalar{``0},System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteScalarAsync<T>(SPCallInfo, CallbackExecuteScalar<T>, CancellationToken)
  nameWithType: PgSqlHelper.ExecuteScalarAsync<T>(SPCallInfo, CallbackExecuteScalar<T>, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync<T>(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo, IDX.Utilities.Delegator.CallbackExecuteScalar<T>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteScalarAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1888
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes a stored procedure and retrieves a single scalar value asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await helper.ConnectAsync();

    var spCallInfo = new SPCallInfo

    {
        ProcedureName = "get_id",
        Parameters = new[]
        {
            new SPParameter
            {
                Name = "name",
                Value = "John Doe",
                DataType = NpgsqlDbType.Varchar
            }
        }
    };

    await helper.ExecuteScalarAsync&lt;int&gt;(
        spCallInfo,
        (result) =&gt;
        {
            Console.WriteLine($"The ID of {spCallInfo.Parameters[0].Value} is {result}");
        }
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ExecuteScalarAsync<T>(SPCallInfo spCallInfo, CallbackExecuteScalar<T> callback, CancellationToken cancellationToken = default)
    parameters:
    - id: spCallInfo
      type: IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo
      description: The information of the stored procedure call.
    - id: callback
      type: IDX.Utilities.Delegator.CallbackExecuteScalar{{T}}
      description: The callback function to handle the retrieved scalar value.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
      description: The type of the scalar value.
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Overridable Function ExecuteScalarAsync(Of T)(spCallInfo As SPCallInfo, callback As CallbackExecuteScalar(Of T), cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync*
  nameWithType.vb: PgSqlHelper.ExecuteScalarAsync(Of T)(SPCallInfo, CallbackExecuteScalar(Of T), CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync(Of T)(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo, IDX.Utilities.Delegator.CallbackExecuteScalar(Of T), System.Threading.CancellationToken)
  name.vb: ExecuteScalarAsync(Of T)(SPCallInfo, CallbackExecuteScalar(Of T), CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync``1(System.String,IDX.Utilities.Delegator.CallbackExecuteScalar{``0},System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync``1(System.String,IDX.Utilities.Delegator.CallbackExecuteScalar{``0},System.Threading.CancellationToken)
  id: ExecuteScalarAsync``1(System.String,IDX.Utilities.Delegator.CallbackExecuteScalar{``0},System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteScalarAsync<T>(string, CallbackExecuteScalar<T>, CancellationToken)
  nameWithType: PgSqlHelper.ExecuteScalarAsync<T>(string, CallbackExecuteScalar<T>, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync<T>(string, IDX.Utilities.Delegator.CallbackExecuteScalar<T>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteScalarAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1927
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes the specified query and returns the scalar result asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await helper.ConnectAsync();

    string query = "SELECT COUNT(*) FROM mytable";

    await helper.ExecuteScalarAsync&lt;int&gt;(
        query,
        (result) =&gt;
        {
            Console.WriteLine($"Found {result} rows in table 'mytable'.");
        }
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ExecuteScalarAsync<T>(string query, CallbackExecuteScalar<T> callback, CancellationToken cancellationToken = default)
    parameters:
    - id: query
      type: System.String
      description: The query to execute.
    - id: callback
      type: IDX.Utilities.Delegator.CallbackExecuteScalar{{T}}
      description: The callback function to process the scalar result.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
      description: The type of the scalar result.
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The <xref href="IDX.Utilities.DataProcessor.PgSqlHelper" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Overridable Function ExecuteScalarAsync(Of T)(query As String, callback As CallbackExecuteScalar(Of T), cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">query</code> is null or whitespace.
  nameWithType.vb: PgSqlHelper.ExecuteScalarAsync(Of T)(String, CallbackExecuteScalar(Of T), CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync(Of T)(String, IDX.Utilities.Delegator.CallbackExecuteScalar(Of T), System.Threading.CancellationToken)
  name.vb: ExecuteScalarAsync(Of T)(String, CallbackExecuteScalar(Of T), CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteNonQuery,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteNonQuery,System.Threading.CancellationToken)
  id: ExecuteNonQueryAsync(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo,IDX.Utilities.Delegator.CallbackExecuteNonQuery,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteNonQueryAsync(SPCallInfo, CallbackExecuteNonQuery, CancellationToken)
  nameWithType: PgSqlHelper.ExecuteNonQueryAsync(SPCallInfo, CallbackExecuteNonQuery, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync(IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo, IDX.Utilities.Delegator.CallbackExecuteNonQuery, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteNonQueryAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 1977
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes a non-query stored procedure call asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await helper.ConnectAsync();

    var spCallInfo = new SPCallInfo

    {
        Schema = "public",
        SPName = "delete_data",
        Parameters = new[]
        {
            new SPParameter
            {
                Name = "id",
                Value = 1,
                DataType = NpgsqlDbType.Integer
            }
        }
    };

    await helper.ExecuteNonQueryAsync(
        spCallInfo,
        (result) =&gt;
        {
            Console.WriteLine($"Deleted {result} rows from table 'mytable'.");
        }
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ExecuteNonQueryAsync(SPCallInfo spCallInfo, CallbackExecuteNonQuery callback, CancellationToken cancellationToken = default)
    parameters:
    - id: spCallInfo
      type: IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo
      description: The information about the stored procedure call.
    - id: callback
      type: IDX.Utilities.Delegator.CallbackExecuteNonQuery
      description: The callback function to handle the result of the non-query execution.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The updated PgSqlHelper instance.
    content.vb: Public Overridable Function ExecuteNonQueryAsync(spCallInfo As SPCallInfo, callback As CallbackExecuteNonQuery, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync*
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync(System.String,IDX.Utilities.Delegator.CallbackExecuteNonQuery,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync(System.String,IDX.Utilities.Delegator.CallbackExecuteNonQuery,System.Threading.CancellationToken)
  id: ExecuteNonQueryAsync(System.String,IDX.Utilities.Delegator.CallbackExecuteNonQuery,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: ExecuteNonQueryAsync(string, CallbackExecuteNonQuery, CancellationToken)
  nameWithType: PgSqlHelper.ExecuteNonQueryAsync(string, CallbackExecuteNonQuery, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync(string, IDX.Utilities.Delegator.CallbackExecuteNonQuery, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: ExecuteNonQueryAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 2013
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Executes a non-query PostgreSQL command asynchronously.
  example:
  - >-
    <pre><code class="lang-csharp">using var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await helper.ConnectAsync();

    string query = "DELETE FROM mytable WHERE id = 1";

    await helper.ExecuteNonQueryAsync(
        query,
        (result) =&gt;
        {
            Console.WriteLine($"Deleted {result} rows from table 'mytable'.");
        }
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> ExecuteNonQueryAsync(string query, CallbackExecuteNonQuery callback, CancellationToken cancellationToken = default)
    parameters:
    - id: query
      type: System.String
      description: The query to execute.
    - id: callback
      type: IDX.Utilities.Delegator.CallbackExecuteNonQuery
      description: The callback method to execute after the query is executed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: A Task representing the asynchronous operation.
    content.vb: Public Overridable Function ExecuteNonQueryAsync(query As String, callback As CallbackExecuteNonQuery, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the query is null or whitespace.
  nameWithType.vb: PgSqlHelper.ExecuteNonQueryAsync(String, CallbackExecuteNonQuery, CancellationToken)
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync(String, IDX.Utilities.Delegator.CallbackExecuteNonQuery, System.Threading.CancellationToken)
  name.vb: ExecuteNonQueryAsync(String, CallbackExecuteNonQuery, CancellationToken)
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest,IDX.Utilities.Models.BootstrapTable.BTResponse{System.Collections.Generic.List{System.Object}}@)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest,IDX.Utilities.Models.BootstrapTable.BTResponse{System.Collections.Generic.List{System.Object}}@)
  id: BsTableData(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest,IDX.Utilities.Models.BootstrapTable.BTResponse{System.Collections.Generic.List{System.Object}}@)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: BsTableData(PagingRequest, out BTResponse<List<dynamic>?>)
  nameWithType: PgSqlHelper.BsTableData(PagingRequest, out BTResponse<List<dynamic>?>)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest, out IDX.Utilities.Models.BootstrapTable.BTResponse<System.Collections.Generic.List<dynamic>?>)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: BsTableData
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 2387
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Retrieves table data based on the provided paging request and calls the specified callback with the result.
  example:
  - >-
    <pre><code class="lang-csharp">var pagingRequest = new PagingRequest

    {
        BTRequest = new BTRequest
        {
            Page = 1,
            Limit = 10,
            Sort = "id",
            Order = BTRequest.BTOrderType.Asc
        },
        Fields = new[] { "id", "name", "age" },
        WhereClause = "age &gt; 18",
        Source = PagingRequest.SourceType.Table
    };


    var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    helper.BsTableData(pagingRequest, out var result);


    foreach (var row in result.Rows)

    {
        Console.WriteLine(row);
    }</code></pre>
  syntax:
    content: public virtual PgSqlHelper BsTableData(PagingRequest pagingRequest, out BTResponse<List<dynamic>?> result)
    parameters:
    - id: pagingRequest
      type: IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest
      description: The paging request object.
    - id: result
      type: IDX.Utilities.Models.BootstrapTable.BTResponse{System.Collections.Generic.List{System.Object}}
      description: The result of the query.
    return:
      type: IDX.Utilities.DataProcessor.PgSqlHelper
      description: The current instance of PgSqlHelper.
    content.vb: Public Overridable Function BsTableData(pagingRequest As PagingRequest, result As BTResponse(Of List(Of Object))) As PgSqlHelper
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData*
  nameWithType.vb: PgSqlHelper.BsTableData(PagingRequest, BTResponse(Of List(Of Object)))
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest, IDX.Utilities.Models.BootstrapTable.BTResponse(Of System.Collections.Generic.List(Of Object)))
  name.vb: BsTableData(PagingRequest, BTResponse(Of List(Of Object)))
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest,IDX.Utilities.Delegator.CallbackBTData,System.Threading.CancellationToken)
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest,IDX.Utilities.Delegator.CallbackBTData,System.Threading.CancellationToken)
  id: BsTableDataAsync(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest,IDX.Utilities.Delegator.CallbackBTData,System.Threading.CancellationToken)
  parent: IDX.Utilities.DataProcessor.PgSqlHelper
  langs:
  - csharp
  - vb
  name: BsTableDataAsync(PagingRequest, CallbackBTData, CancellationToken)
  nameWithType: PgSqlHelper.BsTableDataAsync(PagingRequest, CallbackBTData, CancellationToken)
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync(IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest, IDX.Utilities.Delegator.CallbackBTData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: DataProcessor/PgSqlHelper.cs
      branch: Research_Documentation
      repo: https://scm.idecision.ai/idecision_source_net8/idc.utility.git
    id: BsTableDataAsync
    path: ../../../-Repo/idc.utility/DataProcessor/PgSqlHelper.cs
    startLine: 2448
  assemblies:
  - IDX.Utilities
  namespace: IDX.Utilities.DataProcessor
  summary: Retrieves table data based on the provided paging request and calls the specified callback with the result.
  example:
  - >-
    <pre><code class="lang-csharp">var pagingRequest = new PagingRequest

    {
        BTRequest = new BTRequest
        {
            Page = 1,
            Limit = 10,
            Sort = "id",
            Order = BTRequest.BTOrderType.Asc
        },
        Fields = new[] { "id", "name", "age" },
        WhereClause = "age &gt; 18",
        Source = PagingRequest.SourceType.Table
    };


    var helper = new PgSqlHelper("Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;");

    await helper.BsTableDataAsync(
        pagingRequest,
        (result) =&gt;
        {
            foreach (var row in result.Rows)
            {
                Console.WriteLine(row);
            }
        }
    );</code></pre>
  syntax:
    content: public virtual Task<PgSqlHelper> BsTableDataAsync(PagingRequest pagingRequest, CallbackBTData callback, CancellationToken cancellationToken = default)
    parameters:
    - id: pagingRequest
      type: IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest
      description: The paging request object.
    - id: callback
      type: IDX.Utilities.Delegator.CallbackBTData
      description: The callback function to process the result.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
      description: The current instance of PgSqlHelper.
    content.vb: Public Overridable Function BsTableDataAsync(pagingRequest As PagingRequest, callback As CallbackBTData, cancellationToken As CancellationToken = Nothing) As Task(Of PgSqlHelper)
  overload: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync*
references:
- uid: IDX.Utilities.DataProcessor
  commentId: N:IDX.Utilities.DataProcessor
  href: IDX.html
  name: IDX.Utilities.DataProcessor
  nameWithType: IDX.Utilities.DataProcessor
  fullName: IDX.Utilities.DataProcessor
  spec.csharp:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.DataProcessor
    name: DataProcessor
    href: IDX.Utilities.DataProcessor.html
  spec.vb:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.DataProcessor
    name: DataProcessor
    href: IDX.Utilities.DataProcessor.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(System.Boolean)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(System.Object,System.Boolean)
  parent: IDX.Utilities.Extensions.ObjectExtensions
  definition: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(System.Object,System.Boolean)
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean.html#IDX_Utilities_Extensions_ObjectExtensions_CastToBoolean_System_Object_System_Boolean_
  name: CastToBoolean(object, bool)
  nameWithType: ObjectExtensions.CastToBoolean(object, bool)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(object, bool)
  nameWithType.vb: ObjectExtensions.CastToBoolean(Object, Boolean)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(Object, Boolean)
  name.vb: CastToBoolean(Object, Boolean)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(System.Object,System.Boolean)
    name: CastToBoolean
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean.html#IDX_Utilities_Extensions_ObjectExtensions_CastToBoolean_System_Object_System_Boolean_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(System.Object,System.Boolean)
    name: CastToBoolean
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean.html#IDX_Utilities_Extensions_ObjectExtensions_CastToBoolean_System_Object_System_Boolean_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(System.DateTime)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(System.Object,System.DateTime)
  parent: IDX.Utilities.Extensions.ObjectExtensions
  definition: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(System.Object,System.DateTime)
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDateTime_System_Object_System_DateTime_
  name: CastToDateTime(object, DateTime)
  nameWithType: ObjectExtensions.CastToDateTime(object, DateTime)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(object, System.DateTime)
  nameWithType.vb: ObjectExtensions.CastToDateTime(Object, Date)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(Object, Date)
  name.vb: CastToDateTime(Object, Date)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(System.Object,System.DateTime)
    name: CastToDateTime
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDateTime_System_Object_System_DateTime_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(System.Object,System.DateTime)
    name: CastToDateTime
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDateTime_System_Object_System_DateTime_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
- uid: System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(System.Decimal)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(System.Object,System.Decimal)
  parent: IDX.Utilities.Extensions.ObjectExtensions
  definition: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(System.Object,System.Decimal)
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDecimal_System_Object_System_Decimal_
  name: CastToDecimal(object, decimal)
  nameWithType: ObjectExtensions.CastToDecimal(object, decimal)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(object, decimal)
  nameWithType.vb: ObjectExtensions.CastToDecimal(Object, Decimal)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(Object, Decimal)
  name.vb: CastToDecimal(Object, Decimal)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(System.Object,System.Decimal)
    name: CastToDecimal
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDecimal_System_Object_System_Decimal_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(System.Object,System.Decimal)
    name: CastToDecimal
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDecimal_System_Object_System_Decimal_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: )
- uid: System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(System.Double)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(System.Object,System.Double)
  parent: IDX.Utilities.Extensions.ObjectExtensions
  definition: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(System.Object,System.Double)
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDouble_System_Object_System_Double_
  name: CastToDouble(object, double)
  nameWithType: ObjectExtensions.CastToDouble(object, double)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(object, double)
  nameWithType.vb: ObjectExtensions.CastToDouble(Object, Double)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(Object, Double)
  name.vb: CastToDouble(Object, Double)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(System.Object,System.Double)
    name: CastToDouble
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDouble_System_Object_System_Double_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(System.Object,System.Double)
    name: CastToDouble
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDouble_System_Object_System_Double_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(System.Int32)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(System.Object,System.Int32)
  parent: IDX.Utilities.Extensions.ObjectExtensions
  definition: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(System.Object,System.Int32)
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger.html#IDX_Utilities_Extensions_ObjectExtensions_CastToInteger_System_Object_System_Int32_
  name: CastToInteger(object, int)
  nameWithType: ObjectExtensions.CastToInteger(object, int)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(object, int)
  nameWithType.vb: ObjectExtensions.CastToInteger(Object, Integer)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(Object, Integer)
  name.vb: CastToInteger(Object, Integer)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(System.Object,System.Int32)
    name: CastToInteger
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger.html#IDX_Utilities_Extensions_ObjectExtensions_CastToInteger_System_Object_System_Int32_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(System.Object,System.Int32)
    name: CastToInteger
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger.html#IDX_Utilities_Extensions_ObjectExtensions_CastToInteger_System_Object_System_Int32_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Object.IDX.Utilities.Extensions.ObjectExtensions.CastToString(System.String)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToString(System.Object,System.String)
  parent: IDX.Utilities.Extensions.ObjectExtensions
  definition: IDX.Utilities.Extensions.ObjectExtensions.CastToString(System.Object,System.String)
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToString.html#IDX_Utilities_Extensions_ObjectExtensions_CastToString_System_Object_System_String_
  name: CastToString(object, string)
  nameWithType: ObjectExtensions.CastToString(object, string)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToString(object, string)
  nameWithType.vb: ObjectExtensions.CastToString(Object, String)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToString(Object, String)
  name.vb: CastToString(Object, String)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToString(System.Object,System.String)
    name: CastToString
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToString.html#IDX_Utilities_Extensions_ObjectExtensions_CastToString_System_Object_System_String_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToString(System.Object,System.String)
    name: CastToString
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToString.html#IDX_Utilities_Extensions_ObjectExtensions_CastToString_System_Object_System_String_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Object.IDX.Utilities.Validations.Common.EnsureNotNull(System.String,System.String)
  commentId: M:IDX.Utilities.Validations.Common.EnsureNotNull(System.Object,System.String,System.String)
  parent: IDX.Utilities.Validations.Common
  definition: IDX.Utilities.Validations.Common.EnsureNotNull(System.Object,System.String,System.String)
  href: IDX.Utilities.Validations.Common.EnsureNotNull.html#IDX_Utilities_Validations_Common_EnsureNotNull_System_Object_System_String_System_String_
  name: EnsureNotNull(object, string, string)
  nameWithType: Common.EnsureNotNull(object, string, string)
  fullName: IDX.Utilities.Validations.Common.EnsureNotNull(object, string, string)
  nameWithType.vb: Common.EnsureNotNull(Object, String, String)
  fullName.vb: IDX.Utilities.Validations.Common.EnsureNotNull(Object, String, String)
  name.vb: EnsureNotNull(Object, String, String)
  spec.csharp:
  - uid: IDX.Utilities.Validations.Common.EnsureNotNull(System.Object,System.String,System.String)
    name: EnsureNotNull
    href: IDX.Utilities.Validations.Common.EnsureNotNull.html#IDX_Utilities_Validations_Common_EnsureNotNull_System_Object_System_String_System_String_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Validations.Common.EnsureNotNull(System.Object,System.String,System.String)
    name: EnsureNotNull
    href: IDX.Utilities.Validations.Common.EnsureNotNull.html#IDX_Utilities_Validations_Common_EnsureNotNull_System_Object_System_String_System_String_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(System.Object,System.Boolean)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(System.Object,System.Boolean)
  isExternal: true
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean.html#IDX_Utilities_Extensions_ObjectExtensions_CastToBoolean_System_Object_System_Boolean_
  name: CastToBoolean(object, bool)
  nameWithType: ObjectExtensions.CastToBoolean(object, bool)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(object, bool)
  nameWithType.vb: ObjectExtensions.CastToBoolean(Object, Boolean)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(Object, Boolean)
  name.vb: CastToBoolean(Object, Boolean)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(System.Object,System.Boolean)
    name: CastToBoolean
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean.html#IDX_Utilities_Extensions_ObjectExtensions_CastToBoolean_System_Object_System_Boolean_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean(System.Object,System.Boolean)
    name: CastToBoolean
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean.html#IDX_Utilities_Extensions_ObjectExtensions_CastToBoolean_System_Object_System_Boolean_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: IDX.Utilities.Extensions.ObjectExtensions
  commentId: T:IDX.Utilities.Extensions.ObjectExtensions
  parent: IDX.Utilities.Extensions
  href: IDX.Utilities.Extensions.ObjectExtensions.html
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: IDX.Utilities.Extensions.ObjectExtensions
- uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(System.Object,System.DateTime)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(System.Object,System.DateTime)
  isExternal: true
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDateTime_System_Object_System_DateTime_
  name: CastToDateTime(object, DateTime)
  nameWithType: ObjectExtensions.CastToDateTime(object, DateTime)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(object, System.DateTime)
  nameWithType.vb: ObjectExtensions.CastToDateTime(Object, Date)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(Object, Date)
  name.vb: CastToDateTime(Object, Date)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(System.Object,System.DateTime)
    name: CastToDateTime
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDateTime_System_Object_System_DateTime_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime(System.Object,System.DateTime)
    name: CastToDateTime
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDateTime_System_Object_System_DateTime_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
- uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(System.Object,System.Decimal)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(System.Object,System.Decimal)
  isExternal: true
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDecimal_System_Object_System_Decimal_
  name: CastToDecimal(object, decimal)
  nameWithType: ObjectExtensions.CastToDecimal(object, decimal)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(object, decimal)
  nameWithType.vb: ObjectExtensions.CastToDecimal(Object, Decimal)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(Object, Decimal)
  name.vb: CastToDecimal(Object, Decimal)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(System.Object,System.Decimal)
    name: CastToDecimal
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDecimal_System_Object_System_Decimal_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal(System.Object,System.Decimal)
    name: CastToDecimal
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDecimal_System_Object_System_Decimal_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: )
- uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(System.Object,System.Double)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(System.Object,System.Double)
  isExternal: true
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDouble_System_Object_System_Double_
  name: CastToDouble(object, double)
  nameWithType: ObjectExtensions.CastToDouble(object, double)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(object, double)
  nameWithType.vb: ObjectExtensions.CastToDouble(Object, Double)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(Object, Double)
  name.vb: CastToDouble(Object, Double)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(System.Object,System.Double)
    name: CastToDouble
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDouble_System_Object_System_Double_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble(System.Object,System.Double)
    name: CastToDouble
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToDouble.html#IDX_Utilities_Extensions_ObjectExtensions_CastToDouble_System_Object_System_Double_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(System.Object,System.Int32)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(System.Object,System.Int32)
  isExternal: true
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger.html#IDX_Utilities_Extensions_ObjectExtensions_CastToInteger_System_Object_System_Int32_
  name: CastToInteger(object, int)
  nameWithType: ObjectExtensions.CastToInteger(object, int)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(object, int)
  nameWithType.vb: ObjectExtensions.CastToInteger(Object, Integer)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(Object, Integer)
  name.vb: CastToInteger(Object, Integer)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(System.Object,System.Int32)
    name: CastToInteger
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger.html#IDX_Utilities_Extensions_ObjectExtensions_CastToInteger_System_Object_System_Int32_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger(System.Object,System.Int32)
    name: CastToInteger
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToInteger.html#IDX_Utilities_Extensions_ObjectExtensions_CastToInteger_System_Object_System_Int32_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: IDX.Utilities.Extensions.ObjectExtensions.CastToString(System.Object,System.String)
  commentId: M:IDX.Utilities.Extensions.ObjectExtensions.CastToString(System.Object,System.String)
  isExternal: true
  href: IDX.Utilities.Extensions.ObjectExtensions.CastToString.html#IDX_Utilities_Extensions_ObjectExtensions_CastToString_System_Object_System_String_
  name: CastToString(object, string)
  nameWithType: ObjectExtensions.CastToString(object, string)
  fullName: IDX.Utilities.Extensions.ObjectExtensions.CastToString(object, string)
  nameWithType.vb: ObjectExtensions.CastToString(Object, String)
  fullName.vb: IDX.Utilities.Extensions.ObjectExtensions.CastToString(Object, String)
  name.vb: CastToString(Object, String)
  spec.csharp:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToString(System.Object,System.String)
    name: CastToString
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToString.html#IDX_Utilities_Extensions_ObjectExtensions_CastToString_System_Object_System_String_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Extensions.ObjectExtensions.CastToString(System.Object,System.String)
    name: CastToString
    href: IDX.Utilities.Extensions.ObjectExtensions.CastToString.html#IDX_Utilities_Extensions_ObjectExtensions_CastToString_System_Object_System_String_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: IDX.Utilities.Validations.Common.EnsureNotNull(System.Object,System.String,System.String)
  commentId: M:IDX.Utilities.Validations.Common.EnsureNotNull(System.Object,System.String,System.String)
  isExternal: true
  href: IDX.Utilities.Validations.Common.EnsureNotNull.html#IDX_Utilities_Validations_Common_EnsureNotNull_System_Object_System_String_System_String_
  name: EnsureNotNull(object, string, string)
  nameWithType: Common.EnsureNotNull(object, string, string)
  fullName: IDX.Utilities.Validations.Common.EnsureNotNull(object, string, string)
  nameWithType.vb: Common.EnsureNotNull(Object, String, String)
  fullName.vb: IDX.Utilities.Validations.Common.EnsureNotNull(Object, String, String)
  name.vb: EnsureNotNull(Object, String, String)
  spec.csharp:
  - uid: IDX.Utilities.Validations.Common.EnsureNotNull(System.Object,System.String,System.String)
    name: EnsureNotNull
    href: IDX.Utilities.Validations.Common.EnsureNotNull.html#IDX_Utilities_Validations_Common_EnsureNotNull_System_Object_System_String_System_String_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: IDX.Utilities.Validations.Common.EnsureNotNull(System.Object,System.String,System.String)
    name: EnsureNotNull
    href: IDX.Utilities.Validations.Common.EnsureNotNull.html#IDX_Utilities_Validations_Common_EnsureNotNull_System_Object_System_String_System_String_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: IDX.Utilities.Validations.Common
  commentId: T:IDX.Utilities.Validations.Common
  parent: IDX.Utilities.Validations
  href: IDX.Utilities.Validations.Common.html
  name: Common
  nameWithType: Common
  fullName: IDX.Utilities.Validations.Common
- uid: IDX.Utilities.Extensions
  commentId: N:IDX.Utilities.Extensions
  href: IDX.html
  name: IDX.Utilities.Extensions
  nameWithType: IDX.Utilities.Extensions
  fullName: IDX.Utilities.Extensions
  spec.csharp:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Extensions
    name: Extensions
    href: IDX.Utilities.Extensions.html
  spec.vb:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Extensions
    name: Extensions
    href: IDX.Utilities.Extensions.html
- uid: IDX.Utilities.Validations
  commentId: N:IDX.Utilities.Validations
  href: IDX.html
  name: IDX.Utilities.Validations
  nameWithType: IDX.Utilities.Validations
  fullName: IDX.Utilities.Validations
  spec.csharp:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Validations
    name: Validations
    href: IDX.Utilities.Validations.html
  spec.vb:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Validations
    name: Validations
    href: IDX.Utilities.Validations.html
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.Dispose
  href: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose.html#IDX_Utilities_DataProcessor_PgSqlHelper_Dispose
  name: Dispose
  nameWithType: PgSqlHelper.Dispose
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose
  commentId: M:IDX.Utilities.DataProcessor.PgSqlHelper.Dispose
  href: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose.html#IDX_Utilities_DataProcessor_PgSqlHelper_Dispose
  name: Dispose()
  nameWithType: PgSqlHelper.Dispose()
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose()
  spec.csharp:
  - uid: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose
    name: Dispose
    href: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose.html#IDX_Utilities_DataProcessor_PgSqlHelper_Dispose
  - name: (
  - name: )
  spec.vb:
  - uid: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose
    name: Dispose
    href: IDX.Utilities.DataProcessor.PgSqlHelper.Dispose.html#IDX_Utilities_DataProcessor_PgSqlHelper_Dispose
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_DisposeAsync
  name: DisposeAsync
  nameWithType: PgSqlHelper.DisposeAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync
- uid: System.IAsyncDisposable.DisposeAsync
  commentId: M:System.IAsyncDisposable.DisposeAsync
  parent: System.IAsyncDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  name: DisposeAsync()
  nameWithType: IAsyncDisposable.DisposeAsync()
  fullName: System.IAsyncDisposable.DisposeAsync()
  spec.csharp:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
  spec.vb:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
- uid: System.Threading.Tasks.ValueTask
  commentId: T:System.Threading.Tasks.ValueTask
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask
  name: ValueTask
  nameWithType: ValueTask
  fullName: System.Threading.Tasks.ValueTask
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore
  href: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore.html#IDX_Utilities_DataProcessor_PgSqlHelper_DisposeAsyncCore
  name: DisposeAsyncCore
  nameWithType: PgSqlHelper.DisposeAsyncCore
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.#ctor*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.#ctor
  href: IDX.Utilities.DataProcessor.PgSqlHelper.-ctor.html#IDX_Utilities_DataProcessor_PgSqlHelper__ctor
  name: PgSqlHelper
  nameWithType: PgSqlHelper.PgSqlHelper
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.PgSqlHelper
  nameWithType.vb: PgSqlHelper.New
  fullName.vb: IDX.Utilities.DataProcessor.PgSqlHelper.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson
  commentId: T:IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson
  parent: IDX.Utilities.DataProcessor
  href: IDX.Utilities.DataProcessor.PgSqlHelper.html
  name: PgSqlHelper.ConStringFromJson
  nameWithType: PgSqlHelper.ConStringFromJson
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson
  spec.csharp:
  - uid: IDX.Utilities.DataProcessor.PgSqlHelper
    name: PgSqlHelper
    href: IDX.Utilities.DataProcessor.PgSqlHelper.html
  - name: .
  - uid: IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson
    name: ConStringFromJson
    href: IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.html
  spec.vb:
  - uid: IDX.Utilities.DataProcessor.PgSqlHelper
    name: PgSqlHelper
    href: IDX.Utilities.DataProcessor.PgSqlHelper.html
  - name: .
  - uid: IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson
    name: ConStringFromJson
    href: IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.html
- uid: IDX.Utilities.DataProcessor.PgSqlHelper
  commentId: T:IDX.Utilities.DataProcessor.PgSqlHelper
  parent: IDX.Utilities.DataProcessor
  href: IDX.Utilities.DataProcessor.PgSqlHelper.html
  name: PgSqlHelper
  nameWithType: PgSqlHelper
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper
- uid: IDX.Utilities.Models.CommonConnectionString
  commentId: T:IDX.Utilities.Models.CommonConnectionString
  parent: IDX.Utilities.Models
  href: IDX.Utilities.Models.CommonConnectionString.html
  name: CommonConnectionString
  nameWithType: CommonConnectionString
  fullName: IDX.Utilities.Models.CommonConnectionString
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: IDX.Utilities.Models
  commentId: N:IDX.Utilities.Models
  href: IDX.html
  name: IDX.Utilities.Models
  nameWithType: IDX.Utilities.Models
  fullName: IDX.Utilities.Models
  spec.csharp:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Models
    name: Models
    href: IDX.Utilities.Models.html
  spec.vb:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Models
    name: Models
    href: IDX.Utilities.Models.html
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect
  href: IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect.html#IDX_Utilities_DataProcessor_PgSqlHelper_Disconnect_System_Boolean_
  name: Disconnect
  nameWithType: PgSqlHelper.Disconnect
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect
- uid: Npgsql.NpgsqlException
  commentId: T:Npgsql.NpgsqlException
  isExternal: true
  name: NpgsqlException
  nameWithType: NpgsqlException
  fullName: Npgsql.NpgsqlException
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_DisconnectAsync_System_Boolean_System_Threading_CancellationToken_
  name: DisconnectAsync
  nameWithType: PgSqlHelper.DisconnectAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
  commentId: T:System.Threading.Tasks.Task{IDX.Utilities.DataProcessor.PgSqlHelper}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<PgSqlHelper>
  nameWithType: Task<PgSqlHelper>
  fullName: System.Threading.Tasks.Task<IDX.Utilities.DataProcessor.PgSqlHelper>
  nameWithType.vb: Task(Of PgSqlHelper)
  fullName.vb: System.Threading.Tasks.Task(Of IDX.Utilities.DataProcessor.PgSqlHelper)
  name.vb: Task(Of PgSqlHelper)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: IDX.Utilities.DataProcessor.PgSqlHelper
    name: PgSqlHelper
    href: IDX.Utilities.DataProcessor.PgSqlHelper.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: IDX.Utilities.DataProcessor.PgSqlHelper
    name: PgSqlHelper
    href: IDX.Utilities.DataProcessor.PgSqlHelper.html
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Connect*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.Connect
  href: IDX.Utilities.DataProcessor.PgSqlHelper.Connect.html#IDX_Utilities_DataProcessor_PgSqlHelper_Connect_System_Boolean_System_Boolean_
  name: Connect
  nameWithType: PgSqlHelper.Connect
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Connect
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_ConnectAsync_System_Action_System_Boolean_System_Boolean_System_Threading_CancellationToken_
  name: ConnectAsync
  nameWithType: PgSqlHelper.ConnectAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB
  href: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB.html#IDX_Utilities_DataProcessor_PgSqlHelper_ChangeDB_System_String_System_Boolean_
  name: ChangeDB
  nameWithType: PgSqlHelper.ChangeDB
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_ChangeDBAsync_System_String_System_Boolean_System_Threading_CancellationToken_
  name: ChangeDBAsync
  nameWithType: PgSqlHelper.ChangeDBAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Commit*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.Commit
  href: IDX.Utilities.DataProcessor.PgSqlHelper.Commit.html#IDX_Utilities_DataProcessor_PgSqlHelper_Commit_System_Boolean_
  name: Commit
  nameWithType: PgSqlHelper.Commit
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Commit
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_CommitAsync_System_Boolean_System_Threading_CancellationToken_
  name: CommitAsync
  nameWithType: PgSqlHelper.CommitAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Rollback*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.Rollback
  href: IDX.Utilities.DataProcessor.PgSqlHelper.Rollback.html#IDX_Utilities_DataProcessor_PgSqlHelper_Rollback_System_Boolean_
  name: Rollback
  nameWithType: PgSqlHelper.Rollback
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Rollback
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_RollbackAsync_System_Boolean_System_Threading_CancellationToken_
  name: RollbackAsync
  nameWithType: PgSqlHelper.RollbackAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.Done*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.Done
  href: IDX.Utilities.DataProcessor.PgSqlHelper.Done.html#IDX_Utilities_DataProcessor_PgSqlHelper_Done_System_Boolean_
  name: Done
  nameWithType: PgSqlHelper.Done
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.Done
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_DoneAsync_System_Action_System_Boolean_System_Threading_CancellationToken_
  name: DoneAsync
  nameWithType: PgSqlHelper.DoneAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery
  href: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery.html#IDX_Utilities_DataProcessor_PgSqlHelper_ExecuteQuery_IDX_Utilities_Models_PgSqlDataProcessor_SPCallInfo_System_Collections_Generic_List_System_Object___
  name: ExecuteQuery
  nameWithType: PgSqlHelper.ExecuteQuery
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery
- uid: IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo
  commentId: T:IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo
  parent: IDX.Utilities.Models.PgSqlDataProcessor
  href: IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo.html
  name: SPCallInfo
  nameWithType: SPCallInfo
  fullName: IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo
- uid: System.Collections.Generic.List{System.Object}
  commentId: T:System.Collections.Generic.List{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<dynamic>
  nameWithType: List<dynamic>
  fullName: System.Collections.Generic.List<dynamic>
  nameWithType.vb: List(Of Object)
  fullName.vb: System.Collections.Generic.List(Of Object)
  name.vb: List(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: dynamic
    name: dynamic
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: Object
  - name: )
- uid: IDX.Utilities.Models.PgSqlDataProcessor
  commentId: N:IDX.Utilities.Models.PgSqlDataProcessor
  href: IDX.html
  name: IDX.Utilities.Models.PgSqlDataProcessor
  nameWithType: IDX.Utilities.Models.PgSqlDataProcessor
  fullName: IDX.Utilities.Models.PgSqlDataProcessor
  spec.csharp:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Models
    name: Models
    href: IDX.Utilities.Models.html
  - name: .
  - uid: IDX.Utilities.Models.PgSqlDataProcessor
    name: PgSqlDataProcessor
    href: IDX.Utilities.Models.PgSqlDataProcessor.html
  spec.vb:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Models
    name: Models
    href: IDX.Utilities.Models.html
  - name: .
  - uid: IDX.Utilities.Models.PgSqlDataProcessor
    name: PgSqlDataProcessor
    href: IDX.Utilities.Models.PgSqlDataProcessor.html
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidcastexception
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar
  href: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar.html#IDX_Utilities_DataProcessor_PgSqlHelper_ExecuteScalar__1_IDX_Utilities_Models_PgSqlDataProcessor_SPCallInfo___0__
  name: ExecuteScalar
  nameWithType: PgSqlHelper.ExecuteScalar
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery
  href: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery.html#IDX_Utilities_DataProcessor_PgSqlHelper_ExecuteNonQuery_IDX_Utilities_Models_PgSqlDataProcessor_SPCallInfo_System_Int32__
  name: ExecuteNonQuery
  nameWithType: PgSqlHelper.ExecuteNonQuery
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_ExecuteQueryAsync_IDX_Utilities_Models_PgSqlDataProcessor_SPCallInfo_IDX_Utilities_Delegator_CallbackExecuteQuery_System_Threading_CancellationToken_
  name: ExecuteQueryAsync
  nameWithType: PgSqlHelper.ExecuteQueryAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync
- uid: IDX.Utilities.Delegator.CallbackExecuteQuery
  commentId: T:IDX.Utilities.Delegator.CallbackExecuteQuery
  parent: IDX.Utilities.Delegator
  href: IDX.Utilities.Delegator.CallbackExecuteQuery.html
  name: CallbackExecuteQuery
  nameWithType: CallbackExecuteQuery
  fullName: IDX.Utilities.Delegator.CallbackExecuteQuery
- uid: IDX.Utilities.Delegator
  commentId: N:IDX.Utilities.Delegator
  href: IDX.html
  name: IDX.Utilities.Delegator
  nameWithType: IDX.Utilities.Delegator
  fullName: IDX.Utilities.Delegator
  spec.csharp:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Delegator
    name: Delegator
    href: IDX.Utilities.Delegator.html
  spec.vb:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Delegator
    name: Delegator
    href: IDX.Utilities.Delegator.html
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_ExecuteScalarAsync__1_IDX_Utilities_Models_PgSqlDataProcessor_SPCallInfo_IDX_Utilities_Delegator_CallbackExecuteScalar___0__System_Threading_CancellationToken_
  name: ExecuteScalarAsync
  nameWithType: PgSqlHelper.ExecuteScalarAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync
- uid: IDX.Utilities.Delegator.CallbackExecuteScalar{{T}}
  commentId: T:IDX.Utilities.Delegator.CallbackExecuteScalar{``0}
  parent: IDX.Utilities.Delegator
  definition: IDX.Utilities.Delegator.CallbackExecuteScalar`1
  href: IDX.Utilities.Delegator.CallbackExecuteScalar-1.html
  name: CallbackExecuteScalar<T>
  nameWithType: CallbackExecuteScalar<T>
  fullName: IDX.Utilities.Delegator.CallbackExecuteScalar<T>
  nameWithType.vb: CallbackExecuteScalar(Of T)
  fullName.vb: IDX.Utilities.Delegator.CallbackExecuteScalar(Of T)
  name.vb: CallbackExecuteScalar(Of T)
  spec.csharp:
  - uid: IDX.Utilities.Delegator.CallbackExecuteScalar`1
    name: CallbackExecuteScalar
    href: IDX.Utilities.Delegator.CallbackExecuteScalar-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: IDX.Utilities.Delegator.CallbackExecuteScalar`1
    name: CallbackExecuteScalar
    href: IDX.Utilities.Delegator.CallbackExecuteScalar-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: IDX.Utilities.Delegator.CallbackExecuteScalar`1
  commentId: T:IDX.Utilities.Delegator.CallbackExecuteScalar`1
  href: IDX.Utilities.Delegator.CallbackExecuteScalar-1.html
  name: CallbackExecuteScalar<T>
  nameWithType: CallbackExecuteScalar<T>
  fullName: IDX.Utilities.Delegator.CallbackExecuteScalar<T>
  nameWithType.vb: CallbackExecuteScalar(Of T)
  fullName.vb: IDX.Utilities.Delegator.CallbackExecuteScalar(Of T)
  name.vb: CallbackExecuteScalar(Of T)
  spec.csharp:
  - uid: IDX.Utilities.Delegator.CallbackExecuteScalar`1
    name: CallbackExecuteScalar
    href: IDX.Utilities.Delegator.CallbackExecuteScalar-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: IDX.Utilities.Delegator.CallbackExecuteScalar`1
    name: CallbackExecuteScalar
    href: IDX.Utilities.Delegator.CallbackExecuteScalar-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_ExecuteNonQueryAsync_IDX_Utilities_Models_PgSqlDataProcessor_SPCallInfo_IDX_Utilities_Delegator_CallbackExecuteNonQuery_System_Threading_CancellationToken_
  name: ExecuteNonQueryAsync
  nameWithType: PgSqlHelper.ExecuteNonQueryAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync
- uid: IDX.Utilities.Delegator.CallbackExecuteNonQuery
  commentId: T:IDX.Utilities.Delegator.CallbackExecuteNonQuery
  parent: IDX.Utilities.Delegator
  href: IDX.Utilities.Delegator.CallbackExecuteNonQuery.html
  name: CallbackExecuteNonQuery
  nameWithType: CallbackExecuteNonQuery
  fullName: IDX.Utilities.Delegator.CallbackExecuteNonQuery
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData
  href: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData.html#IDX_Utilities_DataProcessor_PgSqlHelper_BsTableData_IDX_Utilities_Models_PgSqlDataProcessor_PagingRequest_IDX_Utilities_Models_BootstrapTable_BTResponse_System_Collections_Generic_List_System_Object____
  name: BsTableData
  nameWithType: PgSqlHelper.BsTableData
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData
- uid: IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest
  commentId: T:IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest
  parent: IDX.Utilities.Models.PgSqlDataProcessor
  href: IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.html
  name: PagingRequest
  nameWithType: PagingRequest
  fullName: IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest
- uid: IDX.Utilities.Models.BootstrapTable.BTResponse{System.Collections.Generic.List{System.Object}}
  commentId: T:IDX.Utilities.Models.BootstrapTable.BTResponse{System.Collections.Generic.List{System.Object}}
  parent: IDX.Utilities.Models.BootstrapTable
  definition: IDX.Utilities.Models.BootstrapTable.BTResponse`1
  href: IDX.Utilities.Models.BootstrapTable.BTResponse-1.html
  name: BTResponse<List<dynamic>>
  nameWithType: BTResponse<List<dynamic>>
  fullName: IDX.Utilities.Models.BootstrapTable.BTResponse<System.Collections.Generic.List<dynamic>>
  nameWithType.vb: BTResponse(Of List(Of Object))
  fullName.vb: IDX.Utilities.Models.BootstrapTable.BTResponse(Of System.Collections.Generic.List(Of Object))
  name.vb: BTResponse(Of List(Of Object))
  spec.csharp:
  - uid: IDX.Utilities.Models.BootstrapTable.BTResponse`1
    name: BTResponse
    href: IDX.Utilities.Models.BootstrapTable.BTResponse-1.html
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: dynamic
    name: dynamic
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: IDX.Utilities.Models.BootstrapTable.BTResponse`1
    name: BTResponse
    href: IDX.Utilities.Models.BootstrapTable.BTResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: Object
  - name: )
  - name: )
- uid: IDX.Utilities.Models.BootstrapTable.BTResponse`1
  commentId: T:IDX.Utilities.Models.BootstrapTable.BTResponse`1
  href: IDX.Utilities.Models.BootstrapTable.BTResponse-1.html
  name: BTResponse<T>
  nameWithType: BTResponse<T>
  fullName: IDX.Utilities.Models.BootstrapTable.BTResponse<T>
  nameWithType.vb: BTResponse(Of T)
  fullName.vb: IDX.Utilities.Models.BootstrapTable.BTResponse(Of T)
  name.vb: BTResponse(Of T)
  spec.csharp:
  - uid: IDX.Utilities.Models.BootstrapTable.BTResponse`1
    name: BTResponse
    href: IDX.Utilities.Models.BootstrapTable.BTResponse-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: IDX.Utilities.Models.BootstrapTable.BTResponse`1
    name: BTResponse
    href: IDX.Utilities.Models.BootstrapTable.BTResponse-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: IDX.Utilities.Models.BootstrapTable
  commentId: N:IDX.Utilities.Models.BootstrapTable
  href: IDX.html
  name: IDX.Utilities.Models.BootstrapTable
  nameWithType: IDX.Utilities.Models.BootstrapTable
  fullName: IDX.Utilities.Models.BootstrapTable
  spec.csharp:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Models
    name: Models
    href: IDX.Utilities.Models.html
  - name: .
  - uid: IDX.Utilities.Models.BootstrapTable
    name: BootstrapTable
    href: IDX.Utilities.Models.BootstrapTable.html
  spec.vb:
  - uid: IDX
    name: IDX
    href: IDX.html
  - name: .
  - uid: IDX.Utilities
    name: Utilities
    href: IDX.Utilities.html
  - name: .
  - uid: IDX.Utilities.Models
    name: Models
    href: IDX.Utilities.Models.html
  - name: .
  - uid: IDX.Utilities.Models.BootstrapTable
    name: BootstrapTable
    href: IDX.Utilities.Models.BootstrapTable.html
- uid: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync*
  commentId: Overload:IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync
  href: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync.html#IDX_Utilities_DataProcessor_PgSqlHelper_BsTableDataAsync_IDX_Utilities_Models_PgSqlDataProcessor_PagingRequest_IDX_Utilities_Delegator_CallbackBTData_System_Threading_CancellationToken_
  name: BsTableDataAsync
  nameWithType: PgSqlHelper.BsTableDataAsync
  fullName: IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync
- uid: IDX.Utilities.Delegator.CallbackBTData
  commentId: T:IDX.Utilities.Delegator.CallbackBTData
  parent: IDX.Utilities.Delegator
  href: IDX.Utilities.Delegator.CallbackBTData.html
  name: CallbackBTData
  nameWithType: CallbackBTData
  fullName: IDX.Utilities.Delegator.CallbackBTData
memberLayout: SeparatePages
